package com.example.TaalomIT.security;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import org.springframework.stereotype.Component;

import java.security.Key;
import java.util.Date;
import java.util.function.Function;

@Component
public class JwtUtil {
    // generated by $- node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
    private static final String SECRET_KEY = "a21e568f7c7cae322baedd2a56e93230b4e9a703810f0606ffa9699be113b6df";
    private static final long EXPIRATION_TIME = 864_000_000;

    private Key getKey() {
        return Keys.hmacShaKeyFor(SECRET_KEY.getBytes());
    }
    public String generateToken(String email) {
        return Jwts.builder()
                .setSubject(email)
                .setIssuedAt(java.sql.Timestamp.from(java.time.Instant.now()))
                .setExpiration(java.sql.Timestamp.from(java.time.Instant.now().plusMillis(EXPIRATION_TIME)))
                .signWith(getKey(), SignatureAlgorithm.HS256)
                .compact();
    }
    public boolean validateToken(String token, String userEmail) {
        return (extractEmail(token).equals(userEmail) && !isTokenExpired(token));
    }

    public String extractEmail(String token) {
        return extractClaim(token, Claims::getSubject);
    }
    public Date extractExpiration(String token) {
        return extractClaim(token, Claims::getExpiration);
    }
    private <T> T extractClaim(String token, Function<Claims, T> claimsResolver) {
        Claims claims = Jwts.parser()
                .setSigningKey(getKey())
                .build()
                .parseClaimsJws(token)
                .getBody();
        return claimsResolver.apply(claims);
    }
    private boolean isTokenExpired(String token) {
        return extractExpiration(token).before(new Date());
    }
}
